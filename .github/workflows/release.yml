name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      - name: Build Tauri app
        run: bun run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/*.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      - name: Build Tauri app (x86_64)
        run: bun run tauri build -- --target x86_64-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Tauri app (aarch64)
        run: bun run tauri build -- --target aarch64-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: |
            src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/x86_64-apple-darwin/release/bundle/macos/*.app
            src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Magic Claude ${{ steps.version.outputs.version }}
          body: |
            ## Magic Claude ${{ steps.version.outputs.version }}
            
            ### 下载 / Downloads
            
            #### Windows
            - `Magic-Claude-*-windows-x64.msi` - Windows MSI 安装包
            - `Magic-Claude-*-windows-x64-setup.exe` - Windows NSIS 安装包
            
            #### macOS
            - `Magic-Claude-*-macos-intel.dmg` - macOS Intel 磁盘映像
            - `Magic-Claude-*-macos-apple-silicon.dmg` - macOS Apple Silicon 磁盘映像
            
            #### Linux (暂时不可用)
            - Linux版本构建暂时禁用，将在解决依赖问题后重新启用
            
            ### 更新内容 / Changelog
            - 🚀 基于最新的 Tauri 2.x 和 React 18
            - 🎨 支持明暗主题切换
            - 🌍 中英文双语支持
            - 📱 响应式设计，适配各种屏幕尺寸
            - 🔧 完整的 Claude CLI 集成
            - 📁 项目管理和会话历史
            - 🤖 Agent 创建和管理
            - 🔌 MCP 服务器支持
            - ⚙️ 高级设置和 Hooks 系统
            
            Magic Claude 是一个功能完整的 Claude CLI 桌面 GUI 应用程序。
          draft: false
          prerelease: false
          files: |
            windows-release/*.msi
            windows-release/*setup.exe
            macos-release/*.dmg


